{"version":3,"sources":["src/javascript/data.json","src/javascript/script.js"],"names":["module","exports","title","timeframes","daily","current","previous","weekly","monthly","myData","data","LoadTimeframes","dailyTime","currentTimeEl","previousTimeEl","x","forEach","element","textContent","dailyTimeframes","document","querySelectorAll","loadDaily","querySelector","addEventListener","event","target","classList","contains","loadWeekly","loadMonthly","stopPropagation"],"mappings":"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","file":"script.81942e4f.js","sourceRoot":"..","sourcesContent":["module.exports=[{title:\"Work\",timeframes:{daily:{current:5,previous:7},weekly:{current:32,previous:36},monthly:{current:103,previous:128}}},{title:\"Play\",timeframes:{daily:{current:1,previous:2},weekly:{current:10,previous:8},monthly:{current:23,previous:29}}},{title:\"Study\",timeframes:{daily:{current:0,previous:1},weekly:{current:4,previous:7},monthly:{current:13,previous:19}}},{title:\"Exercise\",timeframes:{daily:{current:1,previous:1},weekly:{current:4,previous:5},monthly:{current:11,previous:18}}},{title:\"Social\",timeframes:{daily:{current:1,previous:3},weekly:{current:5,previous:10},monthly:{current:21,previous:23}}},{title:\"Self Care\",timeframes:{daily:{current:0,previous:1},weekly:{current:2,previous:2},monthly:{current:7,previous:11}}}];","import data from \"./data.json\";\n\nconst myData = data; //data received from json file\n//console.log(myData);\n//console.log(myData[0].timeframes.daily.current);\n\nclass LoadTimeframes {\n  constructor(dailyTime, currentTimeEl, previousTimeEl) {\n    this.dailyTime = dailyTime; //data from json\n    this.currentTimeEl = currentTimeEl; //Element in which current time is gonna be displayed\n    this.previousTimeEl = previousTimeEl; //Element in which previous time is gonna be displayed\n  }\n  //So what happens here is we assign 0 to x that we later use as index in dailyTime array\n  //Then we take elements(currentTimeEl, previousTimeEl) which we use to display time user had spent on something\n  //We increment x to increase index value\n  //After first forEach is done, we're assigning 0 to x to reset current index so we can do another forEach for 'previous time' (previous time spent on some kind of activity)\n  \n  loadDaily() {\n    let x = 0;\n    this.currentTimeEl.forEach((element) => {\n      element.textContent = `${this.dailyTime[x].timeframes.daily.current}hrs`;\n      x++;\n    });\n    x = 0;\n    this.previousTimeEl.forEach((element) => {\n      element.textContent = `${this.dailyTime[x].timeframes.daily.previous}hrs`;\n      x++;\n    });\n  }\n  \n  loadWeekly() {\n    let x = 0;\n    this.currentTimeEl.forEach((element) => {\n      element.textContent = `${this.dailyTime[x].timeframes.weekly.current}hrs`;\n      x++;\n    });\n    x = 0;\n    this.previousTimeEl.forEach((element) => {\n      element.textContent = `${this.dailyTime[x].timeframes.weekly.previous}hrs`;\n      x++;\n    });\n  }\n  \n  loadMonthly() {\n    let x = 0;\n    this.currentTimeEl.forEach((element) => {\n      element.textContent = `${this.dailyTime[x].timeframes.monthly.current}hrs`;\n      x++;\n    });\n    x = 0;\n    this.previousTimeEl.forEach((element) => {\n      element.textContent = `${this.dailyTime[x].timeframes.monthly.previous}hrs`;\n      x++;\n    });\n  }\n}\n\n//loading dailyTimeframes - myData is json current time, .spent-time returns nodeList of elements that are later turned into array with forEach method inside class\n//'previous-spent-time' are elements that display time we spent in previous week\nconst dailyTimeframes = new LoadTimeframes(\n  myData,\n  document.querySelectorAll(\".spent-time\"),\n  document.querySelectorAll(\".previous-spent-time\")\n);\n\ndailyTimeframes.loadDaily(); //By default daily time is loaded\n\n//Event delegation\ndocument.querySelector(\".card-time\").addEventListener(\"click\", (event) => {\n  if (event.target.classList.contains(\"daily\")) {\n    dailyTimeframes.loadDaily();\n  } else if (event.target.classList.contains(\"weekly\")) {\n    dailyTimeframes.loadWeekly();\n  } else if (event.target.classList.contains(\"monthly\")) {\n    dailyTimeframes.loadMonthly();\n  }\n  event.stopPropagation();\n});\n"]}