{"version":3,"sources":["javascript/data.json","javascript/script.js"],"names":["myData","data","LoadTimeframes","constructor","dailyTime","currentTimeEl","previousTimeEl","loadDaily","x","forEach","element","textContent","timeframes","daily","current","previous","loadWeekly","weekly","loadMonthly","monthly","dailyTimeframes","document","querySelectorAll","querySelector","addEventListener","event","target","classList","contains","stopPropagation"],"mappings":";AAAA,OAAA,QAAA,CAAA,CAAA,MAAA,OAAA,WAAA,CAAA,MAAA,CAAA,QAAA,EAAA,SAAA,GAAA,OAAA,CAAA,QAAA,GAAA,SAAA,IAAA,QAAA,CAAA,QAAA,IAAA,SAAA,OAAA,CAAA,MAAA,OAAA,WAAA,CAAA,MAAA,CAAA,QAAA,EAAA,SAAA,GAAA,OAAA,CAAA,QAAA,GAAA,SAAA,GAAA,QAAA,CAAA,QAAA,GAAA,SAAA,MAAA,CAAA,MAAA,QAAA,WAAA,CAAA,MAAA,CAAA,QAAA,EAAA,SAAA,GAAA,OAAA,CAAA,QAAA,EAAA,SAAA,GAAA,QAAA,CAAA,QAAA,GAAA,SAAA,MAAA,CAAA,MAAA,WAAA,WAAA,CAAA,MAAA,CAAA,QAAA,EAAA,SAAA,GAAA,OAAA,CAAA,QAAA,EAAA,SAAA,GAAA,QAAA,CAAA,QAAA,GAAA,SAAA,MAAA,CAAA,MAAA,SAAA,WAAA,CAAA,MAAA,CAAA,QAAA,EAAA,SAAA,GAAA,OAAA,CAAA,QAAA,EAAA,SAAA,IAAA,QAAA,CAAA,QAAA,GAAA,SAAA,MAAA,CAAA,MAAA,YAAA,WAAA,CAAA,MAAA,CAAA,QAAA,EAAA,SAAA,GAAA,OAAA,CAAA,QAAA,EAAA,SAAA,GAAA,QAAA,CAAA,QAAA,EAAA,SAAA;;ACoEA,aApEA,IAAA,EAAA,EAAA,QAAA,gBAoEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAlEA,MAAMA,EAASC,EAAf,QAIA,MAAMC,EACJC,YAAYC,EAAWC,EAAeC,GAC/BF,KAAAA,UAAYA,EACZC,KAAAA,cAAgBA,EAChBC,KAAAA,eAAiBA,EAOxBC,YACMC,IAAAA,EAAI,EACHH,KAAAA,cAAcI,QAASC,IAC1BA,EAAQC,eAAiB,KAAKP,UAAUI,GAAGI,WAAWC,MAAMC,aAC5DN,MAEFA,EAAI,EACCF,KAAAA,eAAeG,QAASC,IAC3BA,EAAQC,eAAiB,KAAKP,UAAUI,GAAGI,WAAWC,MAAME,cAC5DP,MAIJQ,aACMR,IAAAA,EAAI,EACHH,KAAAA,cAAcI,QAASC,IAC1BA,EAAQC,eAAiB,KAAKP,UAAUI,GAAGI,WAAWK,OAAOH,aAC7DN,MAEFA,EAAI,EACCF,KAAAA,eAAeG,QAASC,IAC3BA,EAAQC,eAAiB,KAAKP,UAAUI,GAAGI,WAAWK,OAAOF,cAC7DP,MAIJU,cACMV,IAAAA,EAAI,EACHH,KAAAA,cAAcI,QAASC,IAC1BA,EAAQC,eAAiB,KAAKP,UAAUI,GAAGI,WAAWO,QAAQL,aAC9DN,MAEFA,EAAI,EACCF,KAAAA,eAAeG,QAASC,IAC3BA,EAAQC,eAAiB,KAAKP,UAAUI,GAAGI,WAAWO,QAAQJ,cAC9DP,OAON,MAAMY,EAAkB,IAAIlB,EAC1BF,EACAqB,SAASC,iBAAiB,eAC1BD,SAASC,iBAAiB,yBAG5BF,EAAgBb,YAGhBc,SAASE,cAAc,cAAcC,iBAAiB,QAAUC,IAC1DA,EAAMC,OAAOC,UAAUC,SAAS,SAClCR,EAAgBb,YACPkB,EAAMC,OAAOC,UAAUC,SAAS,UACzCR,EAAgBJ,aACPS,EAAMC,OAAOC,UAAUC,SAAS,YACzCR,EAAgBF,cAElBO,EAAMI","file":"script.909832a1.js","sourceRoot":"../src","sourcesContent":["module.exports=[{title:\"Work\",timeframes:{daily:{current:5,previous:7},weekly:{current:32,previous:36},monthly:{current:103,previous:128}}},{title:\"Play\",timeframes:{daily:{current:1,previous:2},weekly:{current:10,previous:8},monthly:{current:23,previous:29}}},{title:\"Study\",timeframes:{daily:{current:0,previous:1},weekly:{current:4,previous:7},monthly:{current:13,previous:19}}},{title:\"Exercise\",timeframes:{daily:{current:1,previous:1},weekly:{current:4,previous:5},monthly:{current:11,previous:18}}},{title:\"Social\",timeframes:{daily:{current:1,previous:3},weekly:{current:5,previous:10},monthly:{current:21,previous:23}}},{title:\"Self Care\",timeframes:{daily:{current:0,previous:1},weekly:{current:2,previous:2},monthly:{current:7,previous:11}}}];","import data from \"./data.json\";\n\nconst myData = data; //data received from json file\n//console.log(myData);\n//console.log(myData[0].timeframes.daily.current);\n\nclass LoadTimeframes {\n  constructor(dailyTime, currentTimeEl, previousTimeEl) {\n    this.dailyTime = dailyTime; //data from json\n    this.currentTimeEl = currentTimeEl; //Element in which current time is gonna be displayed\n    this.previousTimeEl = previousTimeEl; //Element in which previous time is gonna be displayed\n  }\n  //So what happens here is we assign 0 to x that we later use as index in dailyTime array\n  //Then we take elements(currentTimeEl, previousTimeEl) which we use to display time user had spent on something\n  //We increment x to increase index value\n  //After first forEach is done, we're assigning 0 to x to reset current index so we can do another forEach for 'previous time' (previous time spent on some kind of activity)\n  \n  loadDaily() {\n    let x = 0;\n    this.currentTimeEl.forEach((element) => {\n      element.textContent = `${this.dailyTime[x].timeframes.daily.current}hrs`;\n      x++;\n    });\n    x = 0;\n    this.previousTimeEl.forEach((element) => {\n      element.textContent = `${this.dailyTime[x].timeframes.daily.previous}hrs`;\n      x++;\n    });\n  }\n  \n  loadWeekly() {\n    let x = 0;\n    this.currentTimeEl.forEach((element) => {\n      element.textContent = `${this.dailyTime[x].timeframes.weekly.current}hrs`;\n      x++;\n    });\n    x = 0;\n    this.previousTimeEl.forEach((element) => {\n      element.textContent = `${this.dailyTime[x].timeframes.weekly.previous}hrs`;\n      x++;\n    });\n  }\n  \n  loadMonthly() {\n    let x = 0;\n    this.currentTimeEl.forEach((element) => {\n      element.textContent = `${this.dailyTime[x].timeframes.monthly.current}hrs`;\n      x++;\n    });\n    x = 0;\n    this.previousTimeEl.forEach((element) => {\n      element.textContent = `${this.dailyTime[x].timeframes.monthly.previous}hrs`;\n      x++;\n    });\n  }\n}\n\n//loading dailyTimeframes - myData is json current time, .spent-time returns nodeList of elements that are later turned into array with forEach method inside class\n//'previous-spent-time' are elements that display time we spent in previous week\nconst dailyTimeframes = new LoadTimeframes(\n  myData,\n  document.querySelectorAll(\".spent-time\"),\n  document.querySelectorAll(\".previous-spent-time\")\n);\n\ndailyTimeframes.loadDaily(); //By default daily time is loaded\n\n//Event delegation\ndocument.querySelector(\".card-time\").addEventListener(\"click\", (event) => {\n  if (event.target.classList.contains(\"daily\")) {\n    dailyTimeframes.loadDaily();\n  } else if (event.target.classList.contains(\"weekly\")) {\n    dailyTimeframes.loadWeekly();\n  } else if (event.target.classList.contains(\"monthly\")) {\n    dailyTimeframes.loadMonthly();\n  }\n  event.stopPropagation();\n});\n"]}